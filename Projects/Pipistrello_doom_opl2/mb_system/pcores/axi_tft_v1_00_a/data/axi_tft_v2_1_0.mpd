#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_tft
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_tft

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION RUN_NGCBUILD = TRUE
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
OPTION ADDITIONAL_OUTPUTS = CONSTRAINTS
OPTION DESC = AXI TFT
OPTION LONG_DESC = AXI TFT
OPTION IP_GROUP = IO Modules:MICROBLAZE
OPTION ARCH_SUPPORT_MAP = (aspartan3=PRODUCTION, spartan3=PRODUCTION, spartan3an=PRODUCTION, spartan3a=PRODUCTION, spartan3e=PRODUCTION, spartan3adsp=PRODUCTION, virtex4lx=PRODUCTION, virtex4sx=PRODUCTION, virtex4fx=PRODUCTION, virtex5lx=PRODUCTION, virtex5sx=PRODUCTION, virtex5fx=PRODUCTION, aspartan3e=PRODUCTION, aspartan3a=PRODUCTION, aspartan3adsp=PRODUCTION, qvirtex4lx=PRODUCTION, qvirtex4sx=PRODUCTION, qvirtex4fx=PRODUCTION, qrvirtex4lx=PRODUCTION, qrvirtex4sx=PRODUCTION, qrvirtex4fx=PRODUCTION, spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qrvirtex5=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION)
OPTION STYLE = HDL

IO_INTERFACE IO_IF = tft_0, IO_TYPE = XIL_TFT_V1

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = spartan6, DT = STRING
PARAMETER C_INSTANCE = axi_tft_inst, DT = STRING
PARAMETER C_TFT_INTERFACE = 1, DT = INTEGER, RANGE = (0, 1), ASSIGNMENT = REQUIRE
PARAMETER C_I2C_SLAVE_ADDR = 0b1110110, DT = std_logic_vector, ADDRESS = NONE, ISVALID = (C_TFT_INTERFACE==1), ASSIGNMENT = REQUIRE
PARAMETER C_DEFAULT_TFT_BASE_ADDR = 0xf0000000, DT = std_logic_vector, ADDRESS = NONE, ASSIGNMENT = REQUIRE
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI, RANGE = (32, 64, 128)
PARAMETER C_MAX_BURST_LEN = 16, DT = INTEGER, BUS = M_AXI, RANGE = (16, 32, 64, 128, 256)
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
PARAMETER C_USE_WSTRB = 0, DT = INTEGER
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = Clk, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = Rst, BUS = S_AXI

PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT M_AXI_ACLK = "", DIR = I, SIGIS = Clk, BUS = M_AXI, ASSIGNMENT = REQUIRE
PORT M_AXI_ARESETN = ARESETN, DIR = I, SIGIS = Rst, BUS = M_AXI
PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWLEN = AWLEN, DIR = O, VEC = [7:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWBURST = AWBURST, DIR = O, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWPROT = AWPROT, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWVALID = AWVALID, DIR = O, BUS = M_AXI
PORT M_AXI_AWREADY = AWREADY, DIR = I, BUS = M_AXI
PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_WLAST = WLAST, DIR = O, BUS = M_AXI
PORT M_AXI_WVALID = WVALID, DIR = O, BUS = M_AXI
PORT M_AXI_WREADY = WREADY, DIR = I, BUS = M_AXI
PORT M_AXI_BRESP = BRESP, DIR = I, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_BVALID = BVALID, DIR = I, BUS = M_AXI
PORT M_AXI_BREADY = BREADY, DIR = O, BUS = M_AXI
PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [31:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARLEN = ARLEN, DIR = O, VEC = [7:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARBURST = ARBURST, DIR = O, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARPROT = ARPROT, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_ARVALID = ARVALID, DIR = O, BUS = M_AXI
PORT M_AXI_ARREADY = ARREADY, DIR = I, BUS = M_AXI
PORT M_AXI_RDATA = RDATA, DIR = I, VEC = [31:0], BUS = M_AXI
PORT M_AXI_RRESP = RRESP, DIR = I, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_RLAST = RLAST, DIR = I, BUS = M_AXI
PORT M_AXI_RVALID = RVALID, DIR = I, BUS = M_AXI
PORT M_AXI_RREADY = RREADY, DIR = O, BUS = M_AXI

PORT SYS_TFT_Clk = "", DIR = I, SIGIS = CLK
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = EDGE_RISING
PORT TFT_HSYNC = "", DIR = O, DESC = 'TFT Horizontal Sync', IO_IF = tft_0, IO_IS = tft_hsync
PORT TFT_VSYNC = "", DIR = O, DESC = 'TFT Verical Sync', IO_IF = tft_0, IO_IS = tft_vsync
PORT TFT_DE = "", DIR = O, DESC = 'TFT Data Enable Sync', IO_IF = tft_0, IO_IS = tft_de
PORT TFT_DPS = "", DIR = O, DESC = 'TFT Display scan method', IO_IF = tft_0, IO_IS = tft_dps
PORT TFT_VGA_CLK = "", DIR = O, DESC = 'TFT VGA clock output', IO_IF = tft_0, IO_IS = tft_vga_clk
PORT TFT_VGA_R = "", DIR = O, VEC = [7:0], ISVALID = (C_TFT_INTERFACE==0), DESC = 'TFT VGA RED data', IO_IF = tft_0, IO_IS = tft_vga_r
PORT TFT_VGA_G = "", DIR = O, VEC = [7:0], ISVALID = (C_TFT_INTERFACE==0), DESC = 'TFT VGA GREEN data', IO_IF = tft_0, IO_IS = tft_vga_g
PORT TFT_VGA_B = "", DIR = O, VEC = [7:0], ISVALID = (C_TFT_INTERFACE==0), DESC = 'TFT VGA BLUE data', IO_IF = tft_0, IO_IS = tft_vga_b
PORT TFT_DVI_CLK_P = "", DIR = O, ISVALID = (C_TFT_INTERFACE==1), DESC = 'TFT DVI Clock', IO_IF = tft_0, IO_IS = tft_dvi_clk
PORT TFT_DVI_CLK_N = "", DIR = O, ISVALID = (C_TFT_INTERFACE==1), DESC = 'TFT DVI Clock', IO_IF = tft_0, IO_IS = tft_dvi_clk
PORT TFT_DVI_DATA = "", DIR = O, VEC = [11:0], ISVALID = (C_TFT_INTERFACE==1), DESC = 'TFT DVI data', IO_IF = tft_0, IO_IS = tft_dvi_data
PORT TFT_IIC_SCL_I = "", DIR = I
PORT TFT_IIC_SCL_O = "", DIR = O
PORT TFT_IIC_SCL_T = "", DIR = O
PORT TFT_IIC_SDA_I = "", DIR = I
PORT TFT_IIC_SDA_O = "", DIR = O
PORT TFT_IIC_SDA_T = "", DIR = O
PORT TFT_IIC_SCL = "", DIR = IO, THREE_STATE = TRUE, TRI_I = TFT_IIC_SCL_I, TRI_O = TFT_IIC_SCL_O, TRI_T = TFT_IIC_SCL_T, ISVALID = (C_TFT_INTERFACE==1), DESC = 'Chrontel I2C Clock', IO_IF = tft_0, IO_IS = tft_i2c_clk
PORT TFT_IIC_SDA = "", DIR = IO, THREE_STATE = TRUE, TRI_I = TFT_IIC_SDA_I, TRI_O = TFT_IIC_SDA_O, TRI_T = TFT_IIC_SDA_T, ISVALID = (C_TFT_INTERFACE==1), DESC = 'Chrontel I2C Data', IO_IF = tft_0, IO_IS = tft_i2c_data

END
